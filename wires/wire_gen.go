// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wires

import (
	"com.github.gin-common/app/service"
	"com.github.gin-common/app/service/impl"
	"com.github.gin-common/common/controllers"
	"github.com/google/wire"
)

// Injectors from injector.go.bak:

func CreateUserController() controllers.Controller {
	createUserForm := provideCreateUserForm()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideCreateUserController(createUserForm, userServiceImpl)
	return controller
}

func UpdateUserController() controllers.Controller {
	updateUserForm := provideUpdateUserForm()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideEditUserController(updateUserForm, userServiceImpl)
	return controller
}

func DeleteUserController() controllers.Controller {
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideDeleteUserController(userServiceImpl)
	return controller
}

func ActivateUserController() controllers.Controller {
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideActivateUserController(userServiceImpl)
	return controller
}

func DeActivateUserController() controllers.Controller {
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideDeActivateUserController(userServiceImpl)
	return controller
}

func GetUserInfoController() controllers.Controller {
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideGetUserInfoController(userServiceImpl)
	return controller
}

func ChangePasswordController() controllers.Controller {
	changePassForm := provideChangePassForm()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	controller := provideChangePasswordController(changePassForm, userServiceImpl)
	return controller
}

func AuthMiddleware() controllers.MiddleWare {
	context := provideRedisContext()
	client := provideRedisRdb()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	middleWare := provideAuthMiddleware(context, client, userServiceImpl)
	return middleWare
}

func DeactivatedAbortMiddleware() controllers.MiddleWare {
	middleWare := provideDeactivatedAbortMiddleware()
	return middleWare
}

func LoginController() controllers.Controller {
	loginForm := provideLoginForm()
	context := provideRedisContext()
	client := provideRedisRdb()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	authServiceImpl := provideAuthService(context, client, userServiceImpl)
	controller := provideLoginController(loginForm, authServiceImpl)
	return controller
}

func LogoutController() controllers.Controller {
	context := provideRedisContext()
	client := provideRedisRdb()
	wiresGormSessionTimeout := provideGormSessionTimeout()
	wiresTimeoutGormContext := provideTimeoutGormContext(wiresGormSessionTimeout)
	db := provideTimeoutGormSession(wiresTimeoutGormContext)
	userServiceImpl := provideUserService(db)
	authServiceImpl := provideAuthService(context, client, userServiceImpl)
	controller := provideLogoutController(authServiceImpl)
	return controller
}

func CurrentUserController() controllers.Controller {
	controller := provideCurrentUserController()
	return controller
}

// injector.go.bak:

var sessionInjectSet = wire.NewSet(provideGormSessionTimeout, provideTimeoutGormContext, provideTimeoutGormSession)

var redisInjectSet = wire.NewSet(provideRedisRdb, provideRedisContext)

var userServiceInjectSet = wire.NewSet(sessionInjectSet, provideUserService, wire.Bind(new(service.UserService), new(*impl.UserServiceImpl)))

var createUserControllerInjectSet = wire.NewSet(provideCreateUserForm, userServiceInjectSet, provideCreateUserController)

var editUserControllerInjectSet = wire.NewSet(provideUpdateUserForm, provideEditUserController, userServiceInjectSet)

var deleteUserControllerInjectSet = wire.NewSet(provideDeleteUserController, userServiceInjectSet)

var activateUserControllerInjectSet = wire.NewSet(provideActivateUserController, userServiceInjectSet)

var deActivateUserControllerInjectSet = wire.NewSet(provideDeActivateUserController, userServiceInjectSet)

var getUserInfoControllerInjectSet = wire.NewSet(provideGetUserInfoController, userServiceInjectSet)

var changePasswordControllerInjectSet = wire.NewSet(provideChangePasswordController, provideChangePassForm, userServiceInjectSet)

var authMiddlewareInjectSet = wire.NewSet(provideAuthMiddleware, redisInjectSet, userServiceInjectSet)

var authServiceInjectSet = wire.NewSet(provideAuthService, redisInjectSet, userServiceInjectSet, wire.Bind(new(service.AuthService), new(*impl.AuthServiceImpl)))

var loginControllerInjectSet = wire.NewSet(provideLoginController, provideLoginForm, authServiceInjectSet)

var logoutControllerInjectSet = wire.NewSet(provideLogoutController, authServiceInjectSet)
